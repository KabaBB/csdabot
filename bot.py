from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import requests, bs4, sqlite3, getpass, socket, platform, psutil
from uuid import getnode as get_mac
from datetime import datetime

token = '5789451039:AAG9jOP1OBJ4m-CbawOB8yFqm1Anol-DV3A'

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 "
                  "Safari/537.36 "
}

math_contact = ['''–ú–∞–∂—É–≥–∞ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á
–¢–µ–ª–µ—Ñ–æ–Ω:
+7 (495) 531-00-00
27244
–ê–¥—Ä–µ—Å: –ê–£–ö "–ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä", –ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –±-—Ä, –¥. 11, –∫–∞–±. S808
–í—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: –ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ù–ò–£ –í–®–≠ –≤ 2018 –≥–æ–¥—É.
–ù–∞—É—á–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞–∂: 1 –≥–æ–¥ 6 –º–µ—Å—è—Ü–µ–≤.
''']
programming_contact = ['''–ì–æ—Ä—à–∫–æ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á
–¢–µ–ª–µ—Ñ–æ–Ω:
28116
–ê–¥—Ä–µ—Å: –ê–£–ö "–ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä", –ü–æ–∫—Ä–æ–≤—Å–∫–∏–π –±-—Ä, –¥. 11, –∫–∞–±. S812
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. 
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: https://www.hse.ru/org/persons/307352167/timetable
–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ù–ò–£ –í–®–≠ –≤ 2019 –≥–æ–¥—É.
''']

bot = Bot(token)
dp = Dispatcher(bot, storage=MemoryStorage())

user_key = InlineKeyboardMarkup(row_width=1)
user_key.add(InlineKeyboardMarkup(text='üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è üë§', url='https://t.me/chikubrikule322'))
user_key.add(InlineKeyboardMarkup(text='‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ ‚òÅÔ∏è', callback_data='weather'))
user_key.add(InlineKeyboardMarkup(text='üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ üë©‚Äçüè´', callback_data='teacher'))
user_key.add(InlineKeyboardMarkup(text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë•', callback_data='users'))

user_key.add(InlineKeyboardMarkup(text='üóÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∫ –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è üóÇ', callback_data='server_info'))

back_menu = InlineKeyboardMarkup(row_width=1)
back_menu.add(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='back'))

predmet = InlineKeyboardMarkup(row_width=1)
predmet.add(InlineKeyboardMarkup(text='üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª', callback_data='pred_programming'))
predmet.add(InlineKeyboardMarkup(text='üßÆ –î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ üßÆ', callback_data='pred_math'))
predmet.add(InlineKeyboardMarkup(text='‚óÄÔ∏è –ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='back'))

base = sqlite3.connect('users.db', check_same_thread=False)
cur = base.cursor()

base.execute('CREATE TABLE IF NOT EXISTS {}(id PRIMARY KEY, username TEXT, full_name TEXT)'.format('user'))
base.commit()


class City(StatesGroup):
    city = State()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    full_name = message.from_user.full_name
    username = message.from_user.username
    try:
        cur.execute('INSERT INTO user VALUES(?, ?, ?)', (f'{message.from_user.id}', f'{username}', f'{full_name}'))
        base.commit()
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –í–®–≠, –¥–∞–≤–∞–π –ø–æ–º–æ–∂–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É.',
                               reply_markup=user_key)

    except Exception as e:

        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –í–®–≠, –¥–∞–≤–∞–π –ø–æ–º–æ–∂–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É.',
                               reply_markup=user_key)


@dp.callback_query_handler(text='server_info')
async def server_infprmation(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)

    name = getpass.getuser()
    ip = socket.gethostbyname(socket.getfqdn())
    mac = get_mac()
    ost = platform.uname()
    zone = psutil.boot_time()
    time = datetime.fromtimestamp(zone)
    text = f'''
üóÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ üóÇ

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
IP –∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã: {ip}
MAC –∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã: {mac}
–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {ost[0]}
–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤ —Å–∏—Å—Ç–µ–º–µ: {time}
'''
    await bot.send_message(message.from_user.id, text, reply_markup=back_menu)


@dp.callback_query_handler(text='users')
async def users_db(callback: types.CallbackQuery):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

    id_user = cur.execute('SELECT id FROM user').fetchall()
    username = cur.execute('SELECT username FROM user').fetchall()
    full_name = cur.execute('SELECT full_name FROM user').fetchall()

    n = len(id_user)

    num = 0

    for i in range(n):
        id = id_user[num][0]
        us = username[num][0]
        name = full_name[num][0]

        await bot.send_message(callback.from_user.id, f'ID: {id}\nUsename: @{us}\nFull Name: {name}')

        num += 1

    await bot.send_message(callback.from_user.id, '–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ',
                           reply_markup=back_menu)


@dp.callback_query_handler(text='backup')
async def backup_save(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)

    await bot.send_document(message.from_user.id, open("users.db", "rb"))

    await bot.send_message(message.from_user.id, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=user_key)


@dp.callback_query_handler(text='teacher')
async def teacher_hand(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)

    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –í–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
                           reply_markup=predmet)


@dp.callback_query_handler(Text(startswith='pred_'))
async def predmet_hand(callback: types.CallbackQuery):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

    msg = callback.data
    msg = msg.replace('pred_', '')

    if msg == 'math':

        await bot.send_message(callback.from_user.id,
                               f'–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:\n{math_contact[0]}',
                               reply_markup=back_menu)

    else:

        await bot.send_message(callback.from_user.id,
                               f'–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é:\n{programming_contact[0]}',
                               reply_markup=back_menu)


@dp.callback_query_handler(text='back')
async def back_hand(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)

    await bot.send_message(message.from_user.id, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=user_key)


@dp.callback_query_handler(text='weather')
async def pasrer(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)

    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')

    await City.city.set()


@dp.message_handler(state=City.city)
async def ref_code(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)

    try:
        wether = requests.get(f'https://www.google.com/search?q=–ø–æ–≥–æ–¥–∞+{message.text}', headers=headers)

        wether_response = bs4.BeautifulSoup(wether.text, "html.parser")
        we = wether_response.find("span", id='wob_tm')
        pogoda = wether_response.find("span", id="wob_dc")

        await bot.send_message(message.from_user.id, f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {message.text} {we.text} ¬∞C\n{pogoda.text}',
                               reply_markup=back_menu)

        await state.finish()

    except:

        await bot.send_message(message.from_user.id, f'–ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –µ—â—ë –Ω–µ—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç—å.',
                               reply_markup=back_menu)


executor.start_polling(dp, skip_updates=True)
